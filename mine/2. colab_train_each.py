# -*- coding: utf-8 -*-
"""colab_train_each.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1q_LCJbmqG-MYwMnRY_0N_AV9-95mbcls
"""

# Commented out IPython magic to ensure Python compatibility.
# %tensorflow_version 2.x
import tensorflow as tf
device_name = tf.test.gpu_device_name()
if device_name != '/device:GPU:0':
  raise SystemError('GPU device not found')
print('Found GPU at: {}'.format(device_name))

from google.colab import drive

drive.mount('/content/gdrive')

from tensorflow.keras.applications.inception_v3 import InceptionV3
from tensorflow.keras.applications.xception import Xception
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Dense, GlobalAveragePooling2D


def inception3(input_shape: tuple):
    # 기준모델
    base_model = InceptionV3(weights=None, include_top=False, input_shape=input_shape)
    # 글로벌 공간 평균값 풀링 레이어를 더합니다
    x = base_model.output
    x = GlobalAveragePooling2D()(x)
    # 완전 연결 레이어를 더합니다
    x = Dense(1024, activation='relu')(x)
    predictions = Dense(9, activation='softmax')(x)

    model = Model(inputs=base_model.input, outputs=predictions)

    model.compile(optimizer='Adam', loss='categorical_crossentropy', metrics=['acc'])
    return model


def xception(input_shape):
    base_model = Xception(weights=None, include_top=False, input_shape=input_shape)
    x = base_model.output
    x = GlobalAveragePooling2D()(x)
    x = Dense(1024, activation='relu')(x)
    predictions = Dense(9, activation='softmax')(x)

    model = Model(inputs=base_model.input, outputs=predictions)

    model.compile(optimizer='Adam', loss='categorical_crossentropy', metrics=['acc'])
    return model

import random
import numpy as np

# 새로 시작할거면 False, 이어서 학습할거면 True
LOAD_MODEL = False

# 가중치 저장할 경로
WEIGHT = '/content/gdrive/My Drive/gta/weights/model_weight3.h5'

model = xception((270, 480, 3))
if LOAD_MODEL:
    model.load_weights(WEIGHT)
    model.compile(optimizer='Adam', loss='categorical_crossentropy', metrics=['acc'])
    print('가중치 불러오기 완료')
else:
    print('새로 학습을 시작합니다')

EPOCHS = 20
FILE_END = 107
for epoch in range(EPOCHS):
  data_order = [i for i in range(1, FILE_END + 1)]
  random.shuffle(data_order)
  for count, file_num in enumerate(data_order):
    try:
      # 데이터 불러올 경로
      file_name = f'/content/gdrive/My Drive/gta/dataset2/training_data-{file_num}.npy'
      train_data = np.load(file_name, allow_pickle=True)
      print(f'epoch {epoch+1}, {count}번째, {file_num}번 파일.npy')
      
      X = np.array([i[0] for i in train_data])
      Y = np.array([i[1] for i in train_data])
      
      model.fit(X, Y, batch_size=30, epochs=1, shuffle=True, validation_split=0.1)

      if count % 10 == 0:
        model.save_weights(WEIGHT)
        print('가중치 저장!')

    except Exception as e:
      print(e)

  model.save_weights(WEIGHT)
  print('가중치 저장!')